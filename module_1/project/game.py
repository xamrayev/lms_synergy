import random
import time
import os
import json

class Game:
    def __init__(self, width=20, height=15):
        self.width = width
        self.height = height
        self.field = [[' ' for _ in range(width)] for _ in range(height)]
        self.helicopter_x = width // 2
        self.helicopter_y = height // 2
        self.helicopter_water = 0
        self.helicopter_max_water = 3
        self.helicopter_lives = 3
        self.score = 0
        self.tick = 0
        self.fires = []
        self.trees = []
        self.rivers = []
        self.hospital_x = 2
        self.hospital_y = 2
        self.shop_x = width - 3
        self.shop_y = 2
        self.clouds = []
        self.weather = "clear"  # clear, storm
        self.storm_duration = 0
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.symbols = {
            'helicopter': 'üöÅ',
            'tree': 'üå≤',
            'fire': 'üî•',
            'river': 'üåä',
            'burned': 'üíÄ',
            'hospital': 'üè•',
            'shop': 'üè™',
            'cloud': '‚òÅÔ∏è',
            'empty': 'üü´'
        }
        
        self.init_game()
    
    def init_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
        self.field = [[' ' for _ in range(self.width)] for _ in range(self.height)]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫
        self.generate_rivers()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
        self.generate_trees()
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–æ–ª—å–Ω–∏—Ü—ã –∏ –º–∞–≥–∞–∑–∏–Ω–∞
        self.field[self.hospital_y][self.hospital_x] = 'H'
        self.field[self.shop_y][self.shop_x] = 'S'
        
        print("–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    def is_valid_cell(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–µ—Ç–∫–∞ –ø–æ–ª—é"""
        return 0 <= x < self.width and 0 <= y < self.height
    
    def generate_rivers(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫"""
        self.rivers = []
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–µ–∫–∞
        river_y = self.height // 3
        for x in range(self.width // 4, 3 * self.width // 4):
            if self.is_valid_cell(x, river_y):
                self.field[river_y][x] = 'R'
                self.rivers.append((x, river_y))
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–∫–∞
        river_x = self.width // 3
        for y in range(self.height // 4, 3 * self.height // 4):
            if self.is_valid_cell(river_x, y):
                self.field[y][river_x] = 'R'
                self.rivers.append((river_x, y))
    
    def generate_trees(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤"""
        self.trees = []
        tree_count = (self.width * self.height) // 8
        
        for _ in range(tree_count):
            attempts = 0
            while attempts < 50:
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                
                if (self.field[y][x] == ' ' and 
                    (x, y) != (self.helicopter_x, self.helicopter_y) and
                    (x, y) != (self.hospital_x, self.hospital_y) and
                    (x, y) != (self.shop_x, self.shop_y)):
                    
                    self.field[y][x] = 'T'
                    self.trees.append((x, y, 'healthy'))  # x, y, —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    break
                attempts += 1
    
    def generate_random_cells(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        # –ù–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            if self.field[y][x] == ' ':
                self.field[y][x] = 'T'
                self.trees.append((x, y, 'healthy'))
        
        # –û–±–ª–∞–∫–∞
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            self.clouds.append((x, y, 5))  # x, y, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    def generate_fires(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∂–∞—Ä–æ–≤"""
        if self.weather == "storm":
            fire_chance = 0.7  # –ë–æ–ª—å—à–µ –ø–æ–∂–∞—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è –≥—Ä–æ–∑—ã
        else:
            fire_chance = 0.4  # –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∞–Ω—Å –ø–æ–∂–∞—Ä–∞
        
        if random.random() < fire_chance and self.trees:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–¥–æ—Ä–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
            healthy_trees = [(x, y) for x, y, state in self.trees if state == 'healthy']
            if healthy_trees:
                x, y = random.choice(healthy_trees)
                self.field[y][x] = 'F'
                self.fires.append((x, y, 5))  # x, y, –≤—Ä–µ–º—è –¥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
                for i, (tx, ty, state) in enumerate(self.trees):
                    if tx == x and ty == y:
                        self.trees[i] = (tx, ty, 'burning')
                        break
                
                print(f"üî• –ü–û–ñ–ê–†! –î–µ—Ä–µ–≤–æ –∑–∞–≥–æ—Ä–µ–ª–æ—Å—å –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})!")
    
    def update_fires(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–æ–≤"""
        new_fires = []
        
        for x, y, time_left in self.fires:
            if time_left > 0:
                new_fires.append((x, y, time_left - 1))
            else:
                # –ü–æ–∂–∞—Ä —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è
                self.field[y][x] = 'B'  # –°–≥–æ—Ä–µ–≤—à–µ–µ –¥–µ—Ä–µ–≤–æ
                self.score -= 10
                
                # –£–¥–∞–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                self.trees = [(tx, ty, state) for tx, ty, state in self.trees 
                             if not (tx == x and ty == y)]
                
                # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–µ –¥–µ—Ä–µ–≤—å—è
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        if dx == 0 and dy == 0:
                            continue
                        nx, ny = x + dx, y + dy
                        if (self.is_valid_cell(nx, ny) and 
                            self.field[ny][nx] == 'T' and
                            random.random() < 0.4):
                            self.field[ny][nx] = 'F'
                            new_fires.append((nx, ny, 3))
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
                            for i, (tx, ty, state) in enumerate(self.trees):
                                if tx == nx and ty == ny:
                                    self.trees[i] = (tx, ty, 'burning')
                                    break
        
        self.fires = new_fires
    
    def update_weather(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        if self.weather == "storm":
            self.storm_duration -= 1
            if self.storm_duration <= 0:
                self.weather = "clear"
        else:
            if random.random() < 0.05:  # 5% —à–∞–Ω—Å –≥—Ä–æ–∑—ã
                self.weather = "storm"
                self.storm_duration = 10
    
    def update_clouds(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤"""
        self.clouds = [(x, y, duration - 1) for x, y, duration in self.clouds 
                       if duration > 1]
    
    def move_helicopter(self, dx, dy):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞"""
        new_x = self.helicopter_x + dx
        new_y = self.helicopter_y + dy
        
        if self.is_valid_cell(new_x, new_y):
            self.helicopter_x = new_x
            self.helicopter_y = new_y
            
            # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–µ—Ç–∫–æ–π
            cell = self.field[new_y][new_x]
            
            if cell == 'R':  # –†–µ–∫–∞ - –Ω–∞–±–∏—Ä–∞–µ–º –≤–æ–¥—É
                self.helicopter_water = min(self.helicopter_water + 1, 
                                          self.helicopter_max_water)
                print(f"–ù–∞–±—Ä–∞–ª–∏ –≤–æ–¥—É! –í–æ–¥—ã: {self.helicopter_water}")
            
            elif cell == 'F':  # –ü–æ–∂–∞—Ä - —Ç—É—à–∏–º
                if self.helicopter_water > 0:
                    self.helicopter_water -= 1
                    self.field[new_y][new_x] = 'T'
                    self.score += 20
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–∂–∞—Ä
                    self.fires = [(x, y, t) for x, y, t in self.fires 
                                 if not (x == new_x and y == new_y)]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
                    for i, (tx, ty, state) in enumerate(self.trees):
                        if tx == new_x and ty == new_y:
                            self.trees[i] = (tx, ty, 'healthy')
                            break
                    
                    print(f"–ü–æ—Ç—É—à–∏–ª–∏ –ø–æ–∂–∞—Ä! –û—á–∫–∏: {self.score}")
                else:
                    print("–ù–µ—Ç –≤–æ–¥—ã –¥–ª—è —Ç—É—à–µ–Ω–∏—è!")
            
            elif cell == 'H':  # –ë–æ–ª—å–Ω–∏—Ü–∞
                if self.score >= 50:
                    self.helicopter_lives += 1
                    self.score -= 50
                    print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ! –ñ–∏–∑–Ω–∏: {self.helicopter_lives}")
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è!")
            
            elif cell == 'S':  # –ú–∞–≥–∞–∑–∏–Ω
                if self.score >= 100:
                    self.helicopter_max_water += 1
                    self.score -= 100
                    print(f"–£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä! –ú–∞–∫—Å–∏–º—É–º –≤–æ–¥—ã: {self.helicopter_max_water}")
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!")
    
    def display_field(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        print(f"üöÅ –û—á–∫–∏: {self.score} | ‚ù§Ô∏è –ñ–∏–∑–Ω–∏: {self.helicopter_lives} | üíß –í–æ–¥–∞: {self.helicopter_water}/{self.helicopter_max_water}")
        print(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞: {self.weather} | ‚è∞ –•–æ–¥: {self.tick}")
        print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤: {len(self.fires)} | üå≤ –î–µ—Ä–µ–≤—å–µ–≤: {len([t for t in self.trees if t[2] == 'healthy'])}")
        print("-" * (self.width * 2 + 1))
        
        for y in range(self.height):
            row = "|"
            for x in range(self.width):
                if x == self.helicopter_x and y == self.helicopter_y:
                    row += self.symbols['helicopter']
                elif (x, y) in [(cx, cy) for cx, cy, _ in self.clouds]:
                    row += self.symbols['cloud']
                elif self.field[y][x] == 'T':
                    row += self.symbols['tree']
                elif self.field[y][x] == 'F':
                    row += self.symbols['fire']
                elif self.field[y][x] == 'R':
                    row += self.symbols['river']
                elif self.field[y][x] == 'B':
                    row += self.symbols['burned']
                elif self.field[y][x] == 'H':
                    row += self.symbols['hospital']
                elif self.field[y][x] == 'S':
                    row += self.symbols['shop']
                else:
                    row += self.symbols['empty']
                row += " "
            row += "|"
            print(row)
        
        print("-" * (self.width * 2 + 1))
        print("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W-–≤–≤–µ—Ä—Ö, S-–≤–Ω–∏–∑, A-–≤–ª–µ–≤–æ, D-–≤–ø—Ä–∞–≤–æ, Q-–≤—ã—Ö–æ–¥, P-–ø–∞—É–∑–∞")
        print("üíæ 1-—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, 2-–∑–∞–≥—Ä—É–∑–∏—Ç—å | üè•-–±–æ–ª—å–Ω–∏—Ü–∞(50üí∞), üè™-–º–∞–≥–∞–∑–∏–Ω(100üí∞)")
    
    def save_game(self, filename="savegame.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        game_data = {
            'width': self.width,
            'height': self.height,
            'field': self.field,
            'helicopter_x': self.helicopter_x,
            'helicopter_y': self.helicopter_y,
            'helicopter_water': self.helicopter_water,
            'helicopter_max_water': self.helicopter_max_water,
            'helicopter_lives': self.helicopter_lives,
            'score': self.score,
            'tick': self.tick,
            'fires': self.fires,
            'trees': self.trees,
            'rivers': self.rivers,
            'weather': self.weather,
            'storm_duration': self.storm_duration
        }
        
        try:
            with open(filename, 'w') as f:
                json.dump(game_data, f)
            print("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_game(self, filename="savegame.json"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã"""
        try:
            with open(filename, 'r') as f:
                game_data = json.load(f)
            
            self.width = game_data['width']
            self.height = game_data['height']
            self.field = game_data['field']
            self.helicopter_x = game_data['helicopter_x']
            self.helicopter_y = game_data['helicopter_y']
            self.helicopter_water = game_data['helicopter_water']
            self.helicopter_max_water = game_data['helicopter_max_water']
            self.helicopter_lives = game_data['helicopter_lives']
            self.score = game_data['score']
            self.tick = game_data['tick']
            self.fires = game_data['fires']
            self.trees = game_data['trees']
            self.rivers = game_data['rivers']
            self.weather = game_data['weather']
            self.storm_duration = game_data['storm_duration']
            
            print("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def game_over(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
        return self.helicopter_lives <= 0
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–í–µ—Ä—Ç–æ–ª–µ—Ç-–ø–æ–∂–∞—Ä–Ω—ã–π'!")
        print("–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Ç—É—à–∏—Ç—å –ø–æ–∂–∞—Ä—ã –∏ —Å–ø–∞—Å–∞—Ç—å –ª–µ—Å!")
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W-–≤–≤–µ—Ä—Ö, S-–≤–Ω–∏–∑, A-–≤–ª–µ–≤–æ, D-–≤–ø—Ä–∞–≤–æ, Q-–≤—ã—Ö–æ–¥")
        print("1-—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, 2-–∑–∞–≥—Ä—É–∑–∏—Ç—å, P-–ø–∞—É–∑–∞")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...")
        
        while not self.game_over():
            self.display_field()
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (w/a/s/d/q/p/1/2): ", end="")
            try:
                key = input().lower().strip()
                
                if key == 'w':
                    self.move_helicopter(0, -1)
                elif key == 's':
                    self.move_helicopter(0, 1)
                elif key == 'a':
                    self.move_helicopter(-1, 0)
                elif key == 'd':
                    self.move_helicopter(1, 0)
                elif key == 'q':
                    print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
                    break
                elif key == 'p':
                    input("–ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                elif key == '1':
                    self.save_game()
                elif key == '2':
                    self.load_game()
                elif key == '':
                    # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
                    pass
                else:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–π —Ö–æ–¥
                self.generate_fires()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∂–∞—Ä—ã –∫–∞–∂–¥—ã–π —Ö–æ–¥
                
                if self.tick % 2 == 0:  # –ö–∞–∂–¥—ã–µ 2 —Ö–æ–¥–∞
                    self.generate_random_cells()
                
                self.update_fires()
                self.update_weather()
                self.update_clouds()
                
                # –£—Ä–æ–Ω –æ—Ç –≥—Ä–æ–∑—ã
                if (self.weather == "storm" and 
                    (self.helicopter_x, self.helicopter_y) in [(x, y) for x, y, _ in self.clouds]):
                    if random.random() < 0.3:
                        self.helicopter_lives -= 1
                        print("–í–µ—Ä—Ç–æ–ª–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –≥—Ä–æ–∑–æ–π!")
                        time.sleep(1)
                
                self.tick += 1
                
            except KeyboardInterrupt:
                print("\n–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                continue
        
        print(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score}")

def game():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ò–≥—Ä–∞ '–í–µ—Ä—Ç–æ–ª–µ—Ç-–ø–æ–∂–∞—Ä–Ω—ã–π'")
    
    # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
    try:
        width = int(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ") or 20)
        height = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15): ") or 15)
    except ValueError:
        width, height = 20, 15
    
    game = Game(width, height)
    game.run()

if __name__ == "__main__":
    game()
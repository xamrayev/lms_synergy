[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "lesson_4",
        "importPath": "module_1.theme_3",
        "description": "module_1.theme_3",
        "isExtraImport": true,
        "detail": "module_1.theme_3",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"lms-synergy\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"lms-synergy\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"lms-synergy\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"lms-synergy\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"lms-synergy\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_1",
        "description": "module_1.theme_2.lesson_1",
        "peekOfCode": "def practice_1():\n    # Запрос информации о питомце\n    vid = input(\"Введите вид питомца: \")\n    vozrast = input(\"Введите возраст питомца: \")\n    klichka = input(\"Введите кличку питомца: \")\n    # Вывод результата\n    print(f\"Это {vid} по кличке \\\"{klichka}\\\". Возраст: {vozrast} лет.\")\ndef practice_2():\n    # Запрашиваем этапы развития человека\n    stage1 = input(\"Введите первую стадию развития человека: \")",
        "detail": "module_1.theme_2.lesson_1",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_1",
        "description": "module_1.theme_2.lesson_1",
        "peekOfCode": "def practice_2():\n    # Запрашиваем этапы развития человека\n    stage1 = input(\"Введите первую стадию развития человека: \")\n    stage2 = input(\"Введите вторую стадию: \")\n    stage3 = input(\"Введите третью стадию: \")\n    stage4 = input(\"Введите четвёртую стадию: \")\n    stage5 = input(\"Введите пятую стадию: \")\n    stage6 = input(\"Введите шестую стадию (например, Homo sapiens sapiens): \")\n    # Выводим результат с разделителем =>\n    print(stage1, stage2, stage3, stage4, stage5, stage6, sep=\" => \")",
        "detail": "module_1.theme_2.lesson_1",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_2",
        "description": "module_1.theme_2.lesson_2",
        "peekOfCode": "def practice_1():\n    # Ввод сторон прямоугольника (возможно, вещественных)\n    a = float(input(\"Введите длину первой стороны прямоугольника: \"))\n    b = float(input(\"Введите длину второй стороны прямоугольника: \"))\n    # Вычисление площади и периметра\n    area = a * b\n    perimeter = 2 * (a + b)\n    # Вывод результатов\n    print(\"Площадь прямоугольника:\", area)\n    print(\"Периметр прямоугольника:\", perimeter)",
        "detail": "module_1.theme_2.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_2",
        "description": "module_1.theme_2.lesson_2",
        "peekOfCode": "def practice_2():\n    # Ввод пятизначного числа\n    number = input(\"Введите пятизначное число: \")\n    # Проверка длины\n    if len(number) != 5 or not number.isdigit():\n        print(\"Ошибка: введите строго пятизначное положительное целое число.\")\n    else:\n        # Преобразуем символы в отдельные цифры\n        d10k = int(number[0])   # десятки тысяч\n        d1k = int(number[1])    # тысячи",
        "detail": "module_1.theme_2.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_3",
        "description": "module_1.theme_2.lesson_3",
        "peekOfCode": "def practice_1():\n    # Ввод числа\n    num = int(input(\"Введите целое число: \"))\n    # Проверка и описание числа\n    if num == 0:\n        print(\"нулевое число\")\n    elif num % 2 != 0:\n        print(\"число не является четным\")\n    else:\n        if num > 0:",
        "detail": "module_1.theme_2.lesson_3",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_3",
        "description": "module_1.theme_2.lesson_3",
        "peekOfCode": "def practice_2():\n    # Ввод слова\n    word = input(\"Введите слово из маленьких латинских букв: \")\n    # Определяем гласные\n    vowels = 'aeiou'\n    vowel_count = 0\n    consonant_count = 0\n    vowel_counts = {v: 0 for v in vowels}\n    # Подсчет\n    for char in word:",
        "detail": "module_1.theme_2.lesson_3",
        "documentation": {}
    },
    {
        "label": "practice_3",
        "kind": 2,
        "importPath": "module_1.theme_2.lesson_3",
        "description": "module_1.theme_2.lesson_3",
        "peekOfCode": "def practice_3():\n    # Ввод данных\n    X = int(input(\"Минимальная сумма инвестиций X: \"))\n    A = int(input(\"У Майкла есть A долларов: \"))\n    B = int(input(\"У Ивана есть B долларов: \"))\n    # Проверка условий\n    if A >= X and B >= X:\n        print(2)\n    elif A >= X:\n        print(\"Mike\")",
        "detail": "module_1.theme_2.lesson_3",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_1",
        "description": "module_1.theme_3.lesson_1",
        "peekOfCode": "def practice_1():\n    # Ввод количества чисел\n    N = int(input(\"Введите количество чисел: \"))\n    count_zero = 0\n    print(f\"Введите {N} целых чисел:\")\n    # Вводим N чисел и считаем нули\n    for _ in range(N):\n        num = int(input())\n        if num == 0:\n            count_zero += 1",
        "detail": "module_1.theme_3.lesson_1",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_1",
        "description": "module_1.theme_3.lesson_1",
        "peekOfCode": "def practice_2():\n    import math\n    # Ввод числа\n    X = int(input(\"Введите натуральное число X (≤ 2*10^9): \"))\n    count = 0\n    limit = int(math.isqrt(X)) + 1\n    # Перебираем делители от 1 до √X\n    for i in range(1, limit):\n        if X % i == 0:\n            count += 1  # i — делитель",
        "detail": "module_1.theme_3.lesson_1",
        "documentation": {}
    },
    {
        "label": "practice_3",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_1",
        "description": "module_1.theme_3.lesson_1",
        "peekOfCode": "def practice_3():\n    # Вводим A и B\n    A = int(input(\"Введите A (начало диапазона): \"))\n    B = int(input(\"Введите B (конец диапазона, A ≤ B): \"))\n    # Список чётных чисел\n    even_numbers = [str(i) for i in range(A, B + 1) if i % 2 == 0]\n    # Вывод через пробел\n    print(\"Четные числа на отрезке:\")\n    print(' '.join(even_numbers))",
        "detail": "module_1.theme_3.lesson_1",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_2",
        "description": "module_1.theme_3.lesson_2",
        "peekOfCode": "def practice_1():\n    # Ввод количества чисел\n    N = int(input(\"Введите количество чисел: \"))\n    # Ввод N чисел в отдельной строке каждое\n    numbers = [int(input()) for _ in range(N)]\n    # Переворот массива\n    reversed_numbers = numbers[::-1]\n    # Вывод в одну строку\n    print(\"Перевернутый массив:\")\n    print(*reversed_numbers)",
        "detail": "module_1.theme_3.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_2",
        "description": "module_1.theme_3.lesson_2",
        "peekOfCode": "def practice_2():\n    # Ввод N и чисел\n    N = int(input(\"Введите количество элементов: \"))\n    arr = list(map(int, input(\"Введите числа через пробел: \").split()))\n    # Проверка на соответствие длины\n    if len(arr) != N:\n        print(\"Ошибка: введено неверное количество чисел.\")\n    else:\n        # Перестановка по условию\n        modified = []",
        "detail": "module_1.theme_3.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_3",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_2",
        "description": "module_1.theme_3.lesson_2",
        "peekOfCode": "def practice_3():\n    # Вводим максимальную массу лодки\n    m = int(input(\"Введите максимальную массу лодки: \"))\n    # Вводим количество рыбаков\n    n = int(input(\"Введите количество рыбаков: \"))\n    # Вводим веса рыбаков\n    weights = [int(input()) for _ in range(n)]\n    # Сортировка по весу\n    weights.sort()\n    # Два указателя: лёгкий и тяжёлый",
        "detail": "module_1.theme_3.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_3",
        "description": "module_1.theme_3.lesson_3",
        "peekOfCode": "def practice_1():\n    # Ввод строки без пробелов\n    s = input(\"Введите строку без пробелов: \")\n    # Сравниваем строку с её обратной версией\n    if s == s[::-1]:\n        print(\"yes\")\n    else:\n        print(\"no\")\ndef practice_2():\n    # Ввод строки (с пробелами)",
        "detail": "module_1.theme_3.lesson_3",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_3",
        "description": "module_1.theme_3.lesson_3",
        "peekOfCode": "def practice_2():\n    # Ввод строки (с пробелами)\n    text = input(\"Введите строку: \")\n    # Разделить по пробелам и соединить одним пробелом\n    cleaned = ' '.join(text.split())\n    # Вывод результата\n    print(\"Изменённая строка:\")\n    print(cleaned)",
        "detail": "module_1.theme_3.lesson_3",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_4",
        "description": "module_1.theme_3.lesson_4",
        "peekOfCode": "def practice_1():\n    # Ввод количества чисел\n    n = int(input(\"Введите количество чисел: \"))\n    # Ввод самих чисел\n    numbers = list(map(int, input(\"Введите числа через пробел: \").split()))\n    # Используем множество для хранения уникальных значений\n    unique_numbers = set(numbers)\n    # Вывод количества уникальных чисел\n    print(len(unique_numbers))\ndef practice_2():",
        "detail": "module_1.theme_3.lesson_4",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_4",
        "description": "module_1.theme_3.lesson_4",
        "peekOfCode": "def practice_2():\n    # Ввод первого списка\n    list1 = list(map(int, input(\"Введите числа первого списка: \").split()))\n    # Ввод второго списка\n    list2 = list(map(int, input(\"Введите числа второго списка: \").split()))\n    # Переводим оба списка в множества\n    set1 = set(list1)\n    set2 = set(list2)\n    # Находим пересечение и выводим его длину\n    common = set1 & set2",
        "detail": "module_1.theme_3.lesson_4",
        "documentation": {}
    },
    {
        "label": "practice_3",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_4",
        "description": "module_1.theme_3.lesson_4",
        "peekOfCode": "def practice_3():\n    # Ввод последовательности чисел\n    numbers = list(map(int, input(\"Введите числа через пробел: \").split()))\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            seen.add(num)",
        "detail": "module_1.theme_3.lesson_4",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_5",
        "description": "module_1.theme_3.lesson_5",
        "peekOfCode": "def practice_1():\n    pets = {}\n    # Запрашиваем количество питомцев\n    n = int(input(\"Сколько питомцев вы хотите добавить? \"))\n    for i in range(n):\n        print(f\"\\nПитомец №{i+1}\")\n        name = input(\"Введите имя питомца: \")\n        species = input(\"Введите вид питомца: \")\n        age = int(input(\"Введите возраст питомца: \"))\n        owner = input(\"Введите имя владельца: \")",
        "detail": "module_1.theme_3.lesson_5",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_5",
        "description": "module_1.theme_3.lesson_5",
        "peekOfCode": "def practice_2():\n    my_dict = {}\n    for i in range(10, -6, -1):  # от 10 до -5 включительно\n        try:\n            my_dict[i] = i ** i\n        except:\n            my_dict[i] = \"Ошибка (нельзя возвести отрицательное в отрицательную степень)\"\n    print(\"\\nСловарь степеней:\")\n    for k, v in my_dict.items():\n        print(f\"{k}: {v}\")",
        "detail": "module_1.theme_3.lesson_5",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\npets = {\n    1: {\n        \"Мухтар\": {\n            \"Вид питомца\": \"Собака\",\n            \"Возраст питомца\": 9,",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "get_suffix",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def get_suffix(age):\n    if age % 10 == 1 and age % 100 != 11:\n        return \"год\"\n    elif 2 <= age % 10 <= 4 and not 12 <= age % 100 <= 14:\n        return \"года\"\n    else:\n        return \"лет\"\ndef get_pet(ID):\n    return pets[ID] if ID in pets else False\ndef pets_list():",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "get_pet",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def get_pet(ID):\n    return pets[ID] if ID in pets else False\ndef pets_list():\n    for ID in pets:\n        pet_dict = pets[ID]\n        for name, info in pet_dict.items():\n            suffix = get_suffix(info[\"Возраст питомца\"])\n            print(f'{ID}. Это {info[\"Вид питомца\"]} по кличке \"{name}\". Возраст: {info[\"Возраст питомца\"]} {suffix}. Владелец: {info[\"Имя владельца\"]}')\ndef create():\n    if pets:",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "pets_list",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def pets_list():\n    for ID in pets:\n        pet_dict = pets[ID]\n        for name, info in pet_dict.items():\n            suffix = get_suffix(info[\"Возраст питомца\"])\n            print(f'{ID}. Это {info[\"Вид питомца\"]} по кличке \"{name}\". Возраст: {info[\"Возраст питомца\"]} {suffix}. Владелец: {info[\"Имя владельца\"]}')\ndef create():\n    if pets:\n        last = collections.deque(pets, maxlen=1)[0]\n        new_id = last + 1",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def create():\n    if pets:\n        last = collections.deque(pets, maxlen=1)[0]\n        new_id = last + 1\n    else:\n        new_id = 1\n    name = input(\"Имя питомца: \")\n    species = input(\"Вид питомца: \")\n    age = int(input(\"Возраст питомца: \"))\n    owner = input(\"Имя владельца: \")",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def read():\n    ID = int(input(\"Введите ID питомца для отображения: \"))\n    pet_dict = get_pet(ID)\n    if not pet_dict:\n        print(\"Питомец с таким ID не найден.\")\n        return\n    for name, info in pet_dict.items():\n        suffix = get_suffix(info[\"Возраст питомца\"])\n        print(f'Это {info[\"Вид питомца\"]} по кличке \"{name}\". Возраст: {info[\"Возраст питомца\"]} {suffix}. Владелец: {info[\"Имя владельца\"]}')\ndef update():",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def update():\n    ID = int(input(\"Введите ID питомца для обновления: \"))\n    pet_dict = get_pet(ID)\n    if not pet_dict:\n        print(\"Питомец с таким ID не найден.\")\n        return\n    for name in pet_dict:\n        print(f\"Обновляем данные для '{name}'\")\n        new_species = input(\"Новый вид питомца: \")\n        new_age = int(input(\"Новый возраст: \"))",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def delete():\n    ID = int(input(\"Введите ID питомца для удаления: \"))\n    if ID in pets:\n        del pets[ID]\n        print(\"Питомец удалён.\")\n    else:\n        print(\"Нет питомца с таким ID.\")\ndef practice_1():\n    # Ввод пользователя\n    n = int(input(\"Введите натуральное число: \"))",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def practice_1():\n    # Ввод пользователя\n    n = int(input(\"Введите натуральное число: \"))\n    # Вычисляем факториалы от n до 1\n    factorial_list = [factorial(i) for i in range(n, 0, -1)]\n    print(\"Список факториалов от\", n, \"до 1:\", factorial_list)\ndef practice_2():\n    while True:\n        command = input(\"\\nВведите команду (create/read/update/delete/list/stop): \").lower()\n        if command == \"stop\":",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "def practice_2():\n    while True:\n        command = input(\"\\nВведите команду (create/read/update/delete/list/stop): \").lower()\n        if command == \"stop\":\n            break\n        elif command == \"create\":\n            create()\n        elif command == \"read\":\n            read()\n        elif command == \"update\":",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "pets",
        "kind": 5,
        "importPath": "module_1.theme_3.lesson_6",
        "description": "module_1.theme_3.lesson_6",
        "peekOfCode": "pets = {\n    1: {\n        \"Мухтар\": {\n            \"Вид питомца\": \"Собака\",\n            \"Возраст питомца\": 9,\n            \"Имя владельца\": \"Павел\"\n        }\n    },\n    2: {\n        \"Каа\": {",
        "detail": "module_1.theme_3.lesson_6",
        "documentation": {}
    },
    {
        "label": "add_matrices",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "def add_matrices(m1, m2):\n    rows = len(m1)\n    cols = len(m1[0])\n    result = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(m1[i][j] + m2[i][j])\n        result.append(row)\n    return result",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "generate_matrix",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "def generate_matrix(rows, cols, min_val=-150, max_val=150):\n    return [[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)]\ndef practice_1():\n    matrix_3 = add_matrices(matrix_1, matrix_2)\n    print(\"Результат сложения matrix_1 и matrix_2:\")\n    for row in matrix_3:\n        print(row)\ndef practice_2():\n    # Генерируем случайные матрицы\n    rows, cols = 10, 10",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "def practice_1():\n    matrix_3 = add_matrices(matrix_1, matrix_2)\n    print(\"Результат сложения matrix_1 и matrix_2:\")\n    for row in matrix_3:\n        print(row)\ndef practice_2():\n    # Генерируем случайные матрицы\n    rows, cols = 10, 10\n    m1 = generate_matrix(rows, cols)\n    m2 = generate_matrix(rows, cols)",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "def practice_2():\n    # Генерируем случайные матрицы\n    rows, cols = 10, 10\n    m1 = generate_matrix(rows, cols)\n    m2 = generate_matrix(rows, cols)\n    # Складываем их\n    m3 = add_matrices(m1, m2)\n    print(\"\\nМатрица 1:\")\n    for row in m1:\n        print(row)",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "matrix_1",
        "kind": 5,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "matrix_1 = [\n    [0, -2, -1, -6, -6, 0, -9, -8, -30, -9],\n    [5, 12, 4, -16, -4, -9, -16, -15, 1, -26],\n    [13, 39, 14, 23, -4, 40, 32, 6, -8, 23],\n    [13, -8, 34, 49, 30, 18, 47, 11, -24, 11],\n    [21, 73, 71, 61, -1, 79, -34, 22, 69, 67],\n    [75, 25, 25, 39, 100, -12, -21, 81, -10, 87],\n    [81, 63, 102, 104, 53, -44, 71, -36, -36, -9],\n    [7, 98, 26, -3, 128, 94, 18, -26, 14, 21],\n    [65, 128, 80, 124, 27, -32, 73, 59, 19, 34],",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "matrix_2",
        "kind": 5,
        "importPath": "module_1.theme_4.lesson_2",
        "description": "module_1.theme_4.lesson_2",
        "peekOfCode": "matrix_2 = [\n    [0, 4, 6, 11, 15, 6, 9, 26, 15, 21],\n    [-5, 4, -15, -9, -4, 2, -8, 19, -4, -1],\n    [-2, -39, -19, 14, 22, 5, -34, 15, 16, -9],\n    [-22, -52, 11, -11, -3, 16, -11, -6, -32, -2],\n    [-61, -47, -5, -58, 16, -13, 28, -36, -64, 2],\n    [-29, 23, 19, 2, -14, -87, 7, -88, 39, 7],\n    [-6, 18, -97, 26, -64, 0, -72, -34, -68, -92],\n    [-120, -117, -72, -129, -139, 16, -61, 36, -137, -29],\n    [-112, -83, 7, -119, -132, -129, -143, -154, -23, -34],",
        "detail": "module_1.theme_4.lesson_2",
        "documentation": {}
    },
    {
        "label": "recursive_print",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_3",
        "description": "module_1.theme_4.lesson_3",
        "peekOfCode": "def recursive_print(my_list, index=0):\n    if index < len(my_list):\n        print(my_list[index])\n        recursive_print(my_list, index + 1)\n    else:\n        print(\"Конец списка\")\n# Исходный список\nmy_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n# Вызов рекурсивной функции\nrecursive_print(my_list)",
        "detail": "module_1.theme_4.lesson_3",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "module_1.theme_4.lesson_3",
        "description": "module_1.theme_4.lesson_3",
        "peekOfCode": "my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n# Вызов рекурсивной функции\nrecursive_print(my_list)",
        "detail": "module_1.theme_4.lesson_3",
        "documentation": {}
    },
    {
        "label": "Transport",
        "kind": 6,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "class Transport:\n    def __init__(self, name, max_speed, mileage):\n        self.name = name\n        self.max_speed = max_speed\n        self.mileage = mileage\n# Класс-наследник\nclass Autobus(Transport):\n    pass\ndef practice_1():\n    # Создание объекта",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "Autobus",
        "kind": 6,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "class Autobus(Transport):\n    pass\ndef practice_1():\n    # Создание объекта\n    bus = Autobus(\"Renault Logan\", 180, 12)\n    # Вывод\n    print(f\"Название автомобиля: {bus.name}\")\n    print(f\"Скорость: {bus.max_speed}\")\n    print(f\"Пробег: {bus.mileage}\")\n# Родительский класс",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "Transport",
        "kind": 6,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "class Transport:\n    def __init__(self, name, max_speed, mileage):\n        self.name = name\n        self.max_speed = max_speed\n        self.mileage = mileage\n    def seating_capacity(self, capacity):\n        return f\"Вместимость одного автобуса {self.name}: {capacity} пассажиров\"\n# Наследуемый класс с переопределением метода\nclass Autobus(Transport):\n    def seating_capacity(self, capacity=50):",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "Autobus",
        "kind": 6,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "class Autobus(Transport):\n    def seating_capacity(self, capacity=50):\n        return super().seating_capacity(capacity)\ndef practice_2():\n    # Создание автобуса\n    bus = Autobus(\"Renault Logan\", 180, 12)\n    # Вывод вместимости\n    print(bus.seating_capacity())\nif __name__ == \"__main__\":\n    practice_1()",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "practice_1",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "def practice_1():\n    # Создание объекта\n    bus = Autobus(\"Renault Logan\", 180, 12)\n    # Вывод\n    print(f\"Название автомобиля: {bus.name}\")\n    print(f\"Скорость: {bus.max_speed}\")\n    print(f\"Пробег: {bus.mileage}\")\n# Родительский класс\nclass Transport:\n    def __init__(self, name, max_speed, mileage):",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "practice_2",
        "kind": 2,
        "importPath": "module_1.theme_4.lesson_4",
        "description": "module_1.theme_4.lesson_4",
        "peekOfCode": "def practice_2():\n    # Создание автобуса\n    bus = Autobus(\"Renault Logan\", 180, 12)\n    # Вывод вместимости\n    print(bus.seating_capacity())\nif __name__ == \"__main__\":\n    practice_1()\n    practice_2()",
        "detail": "module_1.theme_4.lesson_4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    lesson_4.practice_1()\n    lesson_4.practice_2()\n    lesson_4.practice_3()\nif __name__ == \"__main__\":\n    main()",
        "detail": "main",
        "documentation": {}
    }
]